[gd_resource type="Shader" format=2]

[resource]
code = "shader_type spatial;
render_mode blend_mix,depth_draw_opaque,cull_back,diffuse_burley,specular_schlick_ggx;
uniform vec4 albedo : hint_color;
uniform sampler2D texture_albedo : hint_albedo;
uniform float specular;
uniform float metallic;
uniform float roughness : hint_range(0,1);
uniform float point_size : hint_range(0,128);
uniform vec3 uv1_scale;
uniform vec3 uv1_offset;
uniform vec3 uv2_scale;
uniform vec3 uv2_offset;
uniform float normal_edge_strength : hint_range(0,1) = 0.3;
uniform float depth_edge_strength : hint_range(0,1) = 0.4;
uniform sampler2D NORMAL_PASS_TEXTURE;
uniform sampler2D DEPTH_PASS_TEXTURE;

void vertex() {
	UV=UV*uv1_scale.xy+uv1_offset.xy;
}

vec3 getNormal(sampler2D normalTex, vec2 uv, vec3 pixelSize, float dx, float dy) {
	return texture(normalTex, uv + pixelSize.xy * vec2(dx, dy)).xyz;
}

float getDepth(sampler2D depthTex, vec2 uv, vec3 pixelSize, float dx, float dy) {
	return texture(depthTex, uv + pixelSize.xy * vec2(dx, dy)).x * 1000.0;
}

float neighborNormalEdgeIndicator(
	sampler2D depthTex, sampler2D normalTex,
	vec2 uv, vec3 pixelSize, 
	float depth, vec3 normal,
	float dx, float dy
) {
	vec3 neighborNormal = getNormal(normalTex, uv, pixelSize, dx, dy);
	
    // Edge pixels should yield to faces closer to the bias direction.
    vec3 normalEdgeBias = vec3(1., 1., 1.); // This should probably be a uniform.
    float normalDiff = dot(normal - neighborNormal, normalEdgeBias);
    float normalIndicator = clamp(smoothstep(-.001, .001, normalDiff), 0.0, 1.0);
	
	// Only the shallower pixel should detect the normal edge.
	float depthDiff = getDepth(depthTex, uv, pixelSize, dx, dy) - depth;
	float depthIndicator = clamp(sign(depthDiff * .0005 + .0025), 0.0, 1.0);
    
	vec3 nCross = cross(normal, neighborNormal);
    return dot(nCross, nCross) * normalIndicator * depthIndicator * 1000.0;
}

vec3 screenToView(vec2 uv, mat4 invProjMat) {
	vec4 ndc = vec4(uv * 2.0 - 1.0, 1.0, 1.0);
	vec4 view = invProjMat * ndc;
	return view.xyz / view.w;
}

uniform float foo = 10.0;
float depthEdgeIndicator(
	sampler2D depthTex, sampler2D normalTex,
	mat4 invProjMat,
	vec2 uv, vec3 pixelSize
) {
	
	vec3 normal = getNormal(normalTex, uv, pixelSize, 0.0, 0.0);
	vec3 uvToWorld = screenToView(vec2(1), invProjMat) - screenToView(vec2(0), invProjMat);
	vec3 pixelToWorld = uvToWorld * pixelSize;
	vec2 depthChange = foo * pixelToWorld.xy * normal.xy / normal.z;
	
	// TODO: Predict expected depth diff based off of normal and only sum the unexpected diff.
    float depth = getDepth(depthTex, uv, pixelSize, 0., 0.);
    float diff = 0.0;
    diff += max(getDepth(depthTex, uv, pixelSize,  1.,  0.) - depth - depthChange.x, 0.0);
    diff += max(getDepth(depthTex, uv, pixelSize, -1.,  0.) - depth + depthChange.x, 0.0);
    diff += max(getDepth(depthTex, uv, pixelSize,  0.,  1.) - depth - depthChange.y, 0.0);
    diff += max(getDepth(depthTex, uv, pixelSize,  0., -1.) - depth + depthChange.y, 0.0);
	
    return step(1.0, diff);
}

const float normalEdgeTheshold = 0.05;
const float normalEdgeWidth = 0.001;
float normalEdgeIndicator(
	sampler2D depthTex, sampler2D normalTex,
	vec2 uv, vec3 pixelSize
) {
	vec3 normal = getNormal(normalTex, uv, pixelSize, 0.0, 0.0);
	float depth = getDepth( depthTex,  uv, pixelSize, 0.0, 0.0);
	
	float indicator = 0.0;
	indicator += neighborNormalEdgeIndicator(depthTex, normalTex, uv, pixelSize, depth, normal,  0.0, -1.0);
	indicator += neighborNormalEdgeIndicator(depthTex, normalTex, uv, pixelSize, depth, normal,  0.0,  1.0);
	indicator += neighborNormalEdgeIndicator(depthTex, normalTex, uv, pixelSize, depth, normal,  1.0,  0.0);
	indicator += neighborNormalEdgeIndicator(depthTex, normalTex, uv, pixelSize, depth, normal, -1.0,  0.0);
	
	return smoothstep(
		normalEdgeTheshold - normalEdgeWidth, 
		normalEdgeTheshold + normalEdgeWidth, 
		indicator
    );
	
}

void fragment() {
	float pixelWidth = 1.0 / VIEWPORT_SIZE.x;
	float pixelHeight = 1.0 / VIEWPORT_SIZE.y;
	vec3 pixelSize = vec3(pixelWidth, pixelHeight, 0.0);
	
	float ni = normalEdgeIndicator(DEPTH_PASS_TEXTURE, NORMAL_PASS_TEXTURE, SCREEN_UV, pixelSize);
	float di = depthEdgeIndicator(DEPTH_PASS_TEXTURE, NORMAL_PASS_TEXTURE, INV_PROJECTION_MATRIX, SCREEN_UV, pixelSize);
	
	float coefficient = di > 0.0 ? (1.0 - depth_edge_strength * di) : (1.0 + normal_edge_strength * ni);

    vec2 base_uv = UV;
	vec4 albedo_tex = texture(texture_albedo,base_uv);
	ALBEDO = albedo.rgb * albedo_tex.rgb * coefficient;
	METALLIC = metallic;
    ROUGHNESS = roughness;
	SPECULAR = specular;
	
	//ALBEDO = texture(NORMAL_TEXTURE, SCREEN_UV).rgb;
}"
